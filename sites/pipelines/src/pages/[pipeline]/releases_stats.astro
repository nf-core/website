---
import PipelinePageLayout from "@layouts/PipelinePageLayout.astro";
import pipelines_json from "@public/pipelines.json";
import { formatDistance } from "date-fns";
import { getEntry } from "astro:content";
import PipelineSidebar from "@components/pipeline/PipelineSidebar.astro";

export function getStaticPaths() {
    var paths: {
        params: {
            pipeline: string;
        };
        props: {
            releases: any;
            md_files: string[];
            meta: any;
        };
    }[] = [];
    pipelines_json.remote_workflows.forEach((pipeline) => {
        const md_files = pipeline.releases[0].doc_files.map((file) =>
            file.replace("docs/", "").replace(".mdx", "").replace(".md", ""),
        );
        const releases = pipeline.releases.filter((release) => release.tag_name !== "dev");
        if (releases.length === 0) {
            return;
        }
        paths.push({
            params: {
                pipeline: pipeline.name,
            },
            props: {
                releases: releases.sort((a, b) => {
                    return new Date(b.published_at).getTime() - new Date(a.published_at).getTime();
                }),
                md_files: md_files,
                meta: pipeline,
            },
        });
    });
    return paths;
}
const { pipeline } = Astro.params;

let { releases, md_files, meta } = Astro.props;
const version = releases[0].tag_name;
const description = meta.description;
let gh_releases: string[] = [];
for (const release of releases) {
    if (release.tag_name !== "dev") {
        const changelog = await getEntry("releases", `${pipeline}/${release.tag_name}/release-notes`);
        if (changelog) {
            let body = changelog.rendered?.html;
            // add github links to PR links, i.e. links like <a href="#XXX">#XXX</a>
            body = body?.replaceAll(/<a href="#(\d+)">#(\d+)</g, (match, p1, p2) => {
                return `<a href="https://github.com/nf-core/${pipeline}/pull/${p1}">#${p2}</a>`;
            });
            // add github links to usernames
            body = body?.replaceAll(/@(\w+([-]\w+)*)/g, (match, p1) => {
                return `<a href="https://github.com/${p1}">${match}</a>`;
            });

            gh_releases.push(body || "");
        }
    }
}
---

<PipelinePageLayout
    pipeline={pipeline}
    meta_title={pipeline + ": Releases"}
    subtitle={description}
    headings={[]}
    version={version}
    versions={releases.map((release) => release.tag_name)}
    tabItems={md_files}
    docSearchTags={[{ name: "page_rank", content: "-50" }]}
>
    <div class="row">
        <div class="col-12 col-md-9 pt-3">
            <h1>Version history</h1>
            <div class="accordion" id="releases">
                {
                    releases &&
                        releases.map((release, i) => {
                            return (
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button
                                            class="accordion-button"
                                            type="button"
                                            data-bs-toggle="collapse"
                                            data-bs-target={`#collapse${release.tag_name.replaceAll(".", "_")}`}
                                            aria-expanded="true"
                                            aria-controls="collapseOne"
                                        >
                                            {release.tag_name}
                                            <span class="text-body-secondary ms-auto small">
                                                {formatDistance(new Date(release.published_at), new Date(), {
                                                    addSuffix: true,
                                                })}
                                            </span>
                                        </button>
                                    </h2>
                                    <div
                                        id={`collapse${release.tag_name.replaceAll(".", "_")}`}
                                        class:list={[
                                            "accordion-collapse collapse",
                                            release.tag_name === version ? "show" : "",
                                        ]}
                                    >
                                        <div class="accordion-body">
                                            <div class="btn-group float-end" role="group" aria-label="Basic example">
                                                <a
                                                    href={`https://api.github.com/repos/nf-core/${pipeline}/zipball/${release.tag_name}`}
                                                    class="btn btn-sm btn-outline-secondary"
                                                >
                                                    Download .zip
                                                </a>

                                                <a
                                                    href={`https://api.github.com/repos/nf-core/${pipeline}/tarball/${release.tag_name}`}
                                                    class="btn btn-sm btn-outline-secondary"
                                                >
                                                    Download .tar.gz
                                                </a>
                                                <a
                                                    href={`https://github.com/nf-core/${pipeline}/releases/tag/${release.tag_name}`}
                                                    class="btn btn-sm btn-outline-secondary"
                                                >
                                                    <i class="fa-brands fa-github me-2" />
                                                    View on GitHub
                                                </a>
                                            </div>
                                            {gh_releases[i] ? <Fragment set:html={gh_releases[i]} /> : ""}
                                        </div>
                                    </div>
                                </div>
                            );
                        })
                }
            </div>
        </div>
        <div class="col-12 col-md-3 toc order-first order-md-last">
            <PipelineSidebar pipeline={pipeline} version={version} meta={meta} />
        </div>
    </div>
</PipelinePageLayout>

<style lang="scss">
    @import "@styles/_variables.scss";
    .nav-link {
        &:hover {
            border: 0;
            border-bottom: 2px solid $success;
        }
        &:focus {
            border: 0;
            border-bottom: 2px solid $success;
        }
    }

    .nav-link.active {
        border: 0;
        border-bottom: 2px solid $success;
    }
</style>

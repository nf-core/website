---
import PipelinePageLayout from "@layouts/PipelinePageLayout.astro";
import pipelines_json from "@public/pipelines.json";
import { getEntry } from "astro:content";
import PipelineSidebar from "@components/pipeline/PipelineSidebar.astro";
import MarkdownWrapper from "@components/markdown/MarkdownWrapper.svelte";

export function getStaticPaths() {
    var paths: { params: { pipeline: string; version: string }; props: { versions: string[]; md_files; meta } }[] = [];
    pipelines_json.remote_workflows.forEach((pipeline) => {
        const releases = pipeline.releases;
        const extended_releases = [...releases, { tag_name: "latest", doc_files: releases[0].doc_files }];
        extended_releases.forEach((release) => {
            const md_files = release.doc_files.map((file) =>
                file.replace("docs/", "").replace(".mdx", "").replace(".md", ""),
            );
            paths.push({
                params: {
                    pipeline: pipeline.name,
                    version: release.tag_name,
                },
                props: {
                    versions: releases.map((release) => release.tag_name),
                    md_files: md_files,
                    meta: pipeline,
                },
            });
        });
    });
    return paths;
}
let { pipeline, version } = Astro.params;

let { versions, md_files, meta } = Astro.props;
const description = meta.description;
const is_archived = meta.archived;
const version_tag_name = version === "latest" ? versions[0] : version;
let entry = await getEntry("pipelines", pipeline + "/" + version_tag_name + "/README");

const headings = entry?.rendered?.metadata?.headings;
const Content = entry?.rendered?.html;
if (version_tag_name !== "dev") {
    meta.doi = entry?.data?.doi;
}

const md_github_url = "https://github.com/nf-core/" + pipeline + "/blob/" + version + "/README.md";
---

<PipelinePageLayout
    pipeline={pipeline}
    subtitle={description}
    meta_title={pipeline + ": Introduction"}
    headings={headings}
    version={version}
    versions={versions}
    is_archived={is_archived}
    tabItems={md_files}
    md_github_url={md_github_url}
    docSearchTags={[{ name: "page_rank", content: (meta.stargazers_count / 100 + 10).toString() }]}
>
    <div class="row">
        <div class="col-12 col-md-8 col-xxl-9 pt-3 markdown-content">
            <MarkdownWrapper headings={headings} client:load>
                <Fragment set:html={Content} />
            </MarkdownWrapper>
        </div>
        <div class="col-12 col-md-4 col-xxl-3 toc">
            <PipelineSidebar pipeline={pipeline} version={version} meta={meta} />
        </div>
    </div>
</PipelinePageLayout>

<style lang="scss">
    @import "@styles/_variables.scss";
    .nav-link {
        &:hover {
            border: 0;
            border-bottom: 2px solid $success;
        }
        &:focus {
            border: 0;
            border-bottom: 2px solid $success;
        }
    }

    .nav-link.active {
        border: 0;
        border-bottom: 2px solid $success;
    }
</style>

---
import MarkdownTocLayout from "@layouts/MarkdownTocLayout.astro";
import FooterPrevNext from "@components/footer/FooterPrevNext.astro";
import SubFooter from "@components/footer/SubFooter.astro";
import { getCollection, render } from "astro:content";
import type { SidebarEntry } from "@utils/types";
import {
    findCurrentGroup,
    addEntriesToSection,
    sanitizeNfCoreLabels,
    findByProperty,
    getSectionParents,
} from "@utils/functions";
import { Icon } from "astro-icon/components";
import ProgressIndicator from "@components/sidebar/ProgressIndicator.svelte";

export async function getStaticPaths() {
    const docs = await getCollection("docs");
    return docs.map((doc) => ({
        params: {
            doc: doc.id.replace(/\.[^/.]+$/, ""),
        },
        props: {
            doc: doc,
        },
    }));
}
const title = Astro.props.doc.data.title;
const subtitle = Astro.props.doc.data.subtitle;
const { headings, Content, remarkPluginFrontmatter } = await render(Astro.props.doc);

let prev_page: { title: string; slug: string } | null = null;
let next_page: { title: string; slug: string } | null = null;

const docs = await getCollection("docs");

let sections: SidebarEntry[] = [
    {
        type: "group",
        id: "usage",
        href: "/docs/usage",
        label: "Usage",
        entries: [],
        collapsed: true,
        icon: "octicon:play-16",
        weight: 1,
    },
    {
        type: "group",
        id: "contributing",
        label: "Contributing",
        href: "/docs/contributing",
        entries: [],
        collapsed: true,
        icon: "octicon:git-pull-request-16",
        weight: 2,
    },
    {
        type: "group",
        id: "tutorials",
        label: "Tutorials",
        href: "/docs/tutorials",
        entries: [],
        collapsed: true,
        icon: "octicon:mortar-board-16",
        weight: 3,
    },
    {
        type: "group",
        id: "guidelines",
        label: "Guidelines",
        href: "/docs/guidelines",
        entries: [],
        collapsed: true,
        icon: "octicon:law-16",
        weight: 4,
    },
    {
        type: "group",
        id: "checklists",
        label: "Checklists",
        href: "/docs/checklists",
        entries: [],
        collapsed: true,
        icon: "octicon:tasklist-16",
        weight: 5,
    },
    {
        type: "group",
        id: "nf-core-tools",
        label: "nf-core/tools",
        href: "/docs/nf-core-tools",
        entries: [],
        collapsed: true,
        icon: "octicon:tools-16",
        weight: 6,
    },
];

addEntriesToSection(sections, docs, Astro.url.pathname);

// go through all sections and section entries and section entries entries, etc, to find a group containing an elemnt with isCurrent and return all entries

const currentGroup = findCurrentGroup(sections);
const currentElement = currentGroup.find((entry) => entry.isCurrent);

let currentGroupIndex = -1;
if (currentGroup.length > 0) {
    currentGroupIndex = currentGroup.findIndex((entry) => entry.isCurrent);
    if (currentGroupIndex === -1) {
        console.error("Could not find current page " + Astro.url.pathname + " in docs collection");
    }
    if (currentElement && currentElement.type === "group" && currentElement.entries.length > 1) {
        currentElement.entries[0].href?.endsWith(Astro.url.pathname)
            ? (next_page = {
                  title: currentElement.entries[1].label,
                  slug: currentElement.entries[1].href,
              })
            : (next_page = {
                  title: currentElement.entries[0].label,
                  slug: currentElement.entries[0].href,
              });
    } else {
        if (currentGroupIndex === 0) {
            const parentHref = currentGroup[0].href?.split("/").slice(0, -1).join("/");

            // find parentHref in sections in different depths
            const parentSection = findByProperty(sections, (val) => val.href === parentHref)?.entries?.find(
                (entry) => entry.entries && entry.entries == currentGroup,
            );

            prev_page = parentSection && parentHref ? { title: "Introduction", slug: parentHref } : null;
        } else if (currentGroup[currentGroupIndex - 1] && currentGroup[currentGroupIndex - 1].href) {
            prev_page = {
                title: currentGroup[currentGroupIndex - 1].label,
                slug: currentGroup[currentGroupIndex - 1].href,
            };
        }
        if (currentGroup[currentGroupIndex + 1] && currentGroup[currentGroupIndex + 1].href) {
            next_page = {
                title: currentGroup[currentGroupIndex + 1].label,
                slug: currentGroup[currentGroupIndex + 1].href,
            };
        }
    }
}

const docType = Astro.props.doc.data.type;

const md_github_url = "https://github.com/nf-core/website/blob/main/sites/docs/src/content/docs/" + Astro.props.doc.id;
// remove leading and trailing slash
const splitUrl = `${Astro.url.pathname}/`.replace(/^\/|\/$/g, "").split("/");
// check if markdown file starts with a heading (markdown or html)
const firstHeading = Astro.props.doc.body.trim().match(/^(#|<h1)/);

let extendedHeadings = headings.map((heading) => {
    heading.checkboxes = remarkPluginFrontmatter.checkboxes
        ?.filter((checkbox) => checkbox.headingId.startsWith(heading.slug))
        .map((checkbox) => ({ id: checkbox.id, checked: checkbox.checked }));
    return heading;
});

// sanitize previous and next page titles
if (prev_page) {
    prev_page.title = sanitizeNfCoreLabels(prev_page.title);
}
if (next_page) {
    next_page.title = sanitizeNfCoreLabels(next_page.title);
}
const parentSections = getSectionParents(sections, currentElement);
---

<MarkdownTocLayout
    title={title}
    subtitle={subtitle}
    meta_title={"Docs: " + title}
    md_github_url={md_github_url}
    headings={extendedHeadings}
    leftSidebar={true}
    rightSidebar={true}
    sections={sections}
    viewTransitions={true}
    docSearchTags={[
        { name: "page_type", content: "Docs" },
        { name: "page_rank", content: "8" },
        {
            name: "page_subtype",
            content: splitUrl[1].replace(/(^|\s)\S/g, (match) => match.toUpperCase()),
        },
    ]}
>
    <div slot="header-top" class="d-none d-xl-block">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="/docs"> Docs</a>
                </li>
                <Icon name="octicon:chevron-right-16" class={"mt-1"} />
                {
                    parentSections.map((section) => (
                        <>
                            <li class="breadcrumb-item">
                                {section.href ? (
                                    <a class="" href={section.href}>
                                        {section.label}
                                    </a>
                                ) : (
                                    <span class="text-reset">{section.label}</span>
                                )}
                            </li>
                            <Icon name="octicon:chevron-right-16" class={"mt-1"} />
                        </>
                    ))
                }
            </ol>
        </nav>
    </div>
    {!firstHeading && <h1>{title}</h1>}
    <Content />
    <FooterPrevNext prev_page={prev_page} next_page={next_page} />

    <SubFooter slot="pre-footer" {md_github_url} />
    {
        docType === "tutorial" && currentElement && currentElement?.type === "link" && (
            <div slot="right-sidebar-top" class="border border-success rounded p-3 pb-2">
                <p>
                    <strong class="h5 my-2">Tutorial:</strong>
                    <a href={parentSections[parentSections.length - 1].entries[0].href}>
                        {parentSections[parentSections.length - 1].label}
                    </a>
                </p>
                <div class="d-flex flex-column">
                    {currentGroup &&
                        currentGroupIndex !== -1 &&
                        currentGroup.map((entry, i) => {
                            if (i === currentGroupIndex) {
                                return (
                                    <ProgressIndicator
                                        label={i + 1}
                                        title={entry.label}
                                        progress={0}
                                        href={entry.href}
                                        onScroll={true}
                                        client:idle
                                        confetti={i === currentGroup.length - 1}
                                    />
                                );
                            } else {
                                return (
                                    <ProgressIndicator
                                        label={i + 1}
                                        title={entry.label}
                                        progress={i < currentGroupIndex ? 100 : 0}
                                        href={entry.href}
                                    />
                                );
                            }
                        })}
                </div>
            </div>
        )
    }{
        docType === "tutorial" && currentElement?.type === "group" && (
            <div slot="right-sidebar-top" class="border border-success rounded p-3 pb-2">
                <span>
                    <strong class="h5 my-2">Tutorial:</strong>
                    <a href={currentElement.href}>{currentElement.label}</a>
                </span>
                <div class="d-flex flex-column">
                    {currentElement?.entries.map((entry, i) => (
                        <ProgressIndicator label={i + 1} title={entry.label} progress={0} href={entry.href} />
                    ))}
                </div>
            </div>
        )
    }
</MarkdownTocLayout>
<style lang="scss">
    @import "@styles/_variables.scss";
    nav {
        --bs-breadcrumb-divider: "";
    }
    .breadcrumb-item,
    .breadcrumb-item a,
    .breadcrumb-item::before {
        color: $gray-200 !important;
    }
    :global(li:has(input[type="checkbox"])) {
        list-style: none;

        list-style-position: outside;
    }
</style>

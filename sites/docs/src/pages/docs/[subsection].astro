---
import PageLayout from "@layouts/PageLayout.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";
import type { SidebarEntry } from "@utils/types";
import { sanitizeNfCoreLabels, addEntriesToSection } from "@utils/functions";
import SidebarSubNav from "@components/sidebar/SidebarSubNav.astro";

export async function getStaticPaths() {
    return ["tutorials", "usage", "contributing", "nf-core-tools", "checklists", "guidelines"].map((subsection) => ({
        params: {
            subsection: subsection,
        },
    }));
}

const { subsection } = Astro.params;

let docs = await getCollection("docs");
import SidebarNav from "@components/sidebar/SidebarNav.astro";
let sections: SidebarEntry[] = [
    {
        type: "group",
        id: "usage",
        label: "Usage",
        href: "/docs/usage",
        entries: [],
        isCurrent: Astro.url.pathname.replace(".html", "") === "/docs/usage",
        collapsed: Astro.url.pathname !== "/docs/usage/",
        icon: "octicon:play-16",
    },
    {
        type: "group",
        id: "contributing",
        label: "Contributing",
        href: "/docs/contributing",
        entries: [],
        isCurrent: Astro.url.pathname.replace(".html", "") === "/docs/contributing",
        collapsed: Astro.url.pathname !== "/docs/contributing/",
        icon: "octicon:git-pull-request-16",
    },
    {
        type: "group",
        id: "tutorials",
        label: "Tutorials",
        href: "/docs/tutorials",
        entries: [],
        isCurrent: Astro.url.pathname.replace(".html", "") === "/docs/tutorials",
        collapsed: Astro.url.pathname !== "/docs/tutorials/",
        icon: "octicon:mortar-board-16",
    },
    {
        type: "group",
        id: "guidelines",
        label: "Guidelines",
        href: "/docs/guidelines",
        entries: [],
        isCurrent: Astro.url.pathname.replace(".html", "") === "/docs/guidelines",
        collapsed: Astro.url.pathname !== "/docs/guidelines/",
        icon: "octicon:law-16",
    },
    {
        type: "group",
        id: "checklists",
        label: "Checklists",
        href: "/docs/checklists",
        entries: [],
        isCurrent: Astro.url.pathname.replace(".html", "") === "/docs/checklists",
        collapsed: Astro.url.pathname !== "/docs/checklists/",
        icon: "octicon:tasklist-16",
    },
    {
        type: "group",
        id: "nf-core-tools",
        label: "nf-core/tools",
        href: "/docs/nf-core-tools",
        entries: [],
        isCurrent: Astro.url.pathname.replace(".html", "") === "/docs/nf-core-tools",
        collapsed: Astro.url.pathname !== "/docs/nf-core-tools/",
        icon: "octicon:tools-16",
    },
];
// sort docs first depth, then by weight, then by title
const sortDocs = (a: CollectionEntry<"docs">, b: CollectionEntry<"docs">) => {
    if (a.id.split("/").length < b.id.split("/").length) {
        return 1;
    } else if (a.id.split("/").length > b.id.split("/").length) {
        return -1;
    } else {
        a.data.weight = a.data.weight || 100;
        b.data.weight = b.data.weight || 100;
        if (a.data.weight < b.data.weight) {
            return -1;
        } else if (a.data.weight > b.data.weight) {
            return 1;
        } else {
            if (a.data.title < b.data.title) {
                return -1;
            } else if (a.data.title > b.data.title) {
                return 1;
            } else {
                return 0;
            }
        }
    }
};

let subsectionDocs: CollectionEntry<"docs">[] = docs.filter((doc) => doc.id.startsWith(subsection + "/"));
const subsections = sections.find((section) => section.href?.startsWith("/docs/" + subsection));

subsectionDocs.sort(sortDocs);
addEntriesToSection(sections, docs, Astro.url.pathname);
// sort all entries by weight if available recursively
const sortEntries = (entries: SidebarEntry[]) => {
    entries.sort((a, b) => {
        if (a.weight && !b.weight) {
            return -1;
        } else if (!a.weight && b.weight) {
            return 1;
        } else if (a.weight && b.weight && a.weight !== b.weight) {
            if (a.weight < b.weight) {
                return -1;
            } else if (a.weight > b.weight) {
                return 1;
            }
        } else {
            return a.label.localeCompare(b.label);
        }
    });
    entries.forEach((entry) => {
        if (entry.type === "group" && entry.entries) {
            sortEntries(entry.entries);
        }
    });
};

sections.forEach((section) => {
    if (section.type === "group") {
        sortEntries(section.entries);
    }
});
const title = subsections.label;
const splitUrl = `${Astro.url.pathname}/`.replace(/^\/|\/$/g, "").split("/");
---

<PageLayout title={title} subtitle={"Overview of sections about " + title} mainpage_container={false}>
    <div slot="header-top" class="d-none d-md-block">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                {
                    splitUrl.slice(0, -1).map((slug, i) => (
                        <>
                            <li class="breadcrumb-item">
                                <a class="text-white" href={"/" + splitUrl.slice(0, i + 1).join("/")}>
                                    {slug.replaceAll("_", " ").replace(/(^|\s)\S/g, (match) => match.toUpperCase())}
                                </a>
                            </li>
                            <Icon name="octicon:chevron-right-16" class={"mt-1"} />
                        </>
                    ))
                }
            </ol>
        </nav>
    </div>
    <div class="container-fluid main-content">
        <div class="row">
            <div class="col-12 col-xl-8 order-2">
                <p>
                    This is the overview of the {subsection} section.
                </p>
                <div class="">
                    <h2>{subsection.slice(0, 1).toUpperCase() + subsection.slice(1)}</h2>
                    <div class="grid">
                        {
                            subsections &&
                                subsections.entries.map((section) => (
                                    <div class="g-col-12 g-col-md-6 g-col-lg-4 g-col-xxxxl-2 card position-relative">
                                        <span class="card-header">
                                            {section.href && (
                                                <a
                                                    href={section.href}
                                                    class:list={[
                                                        "text-decoration-none",
                                                        { "stretched-link": section.type === "link" },
                                                    ]}
                                                >
                                                    {sanitizeNfCoreLabels(section.label)}
                                                </a>
                                            )}
                                            {!section.href && sanitizeNfCoreLabels(section.label)}
                                        </span>
                                        {section.type === "link" && (
                                            <div class="card-body">
                                                <p>
                                                    {
                                                        docs.find(
                                                            (doc) =>
                                                                "/docs/" + doc.id.replace(/\.[^/.]+$/, "") ===
                                                                section.href,
                                                        )?.data.subtitle
                                                    }
                                                </p>
                                            </div>
                                        )}

                                        <ul class="card-body mx-3 mb-0" id={section.label?.replace("/", "-")}>
                                            {section.entries && <SidebarSubNav items={section.entries} nested={true} />}
                                        </ul>
                                    </div>
                                ))
                        }
                    </div>
                </div>
            </div>

            <div class="col-12 col-xl-3 sticky-top-under d-none d-xl-inline sidebar-left order-1">
                <SidebarNav items={sections} />
            </div>
        </div>
    </div>
</PageLayout>
<style is:global>
    .card li {
        a,
        summary {
            border-inline-end: none !important;
        }
        a:hover {
            text-decoration: underline !important;
            background-color: transparent !important;
        }
    }
</style>

---
import MarkdownTocLayout from "@layouts/MarkdownTocLayout.astro";
import { getCollection, render } from "astro:content";
import SidebarStatsRow from "@components/sidebar/SidebarStatsRow.astro";
import GitHubProfilePictureExtended from "@components/GitHubProfilePictureExtended.svelte";
import { Image } from "astro:assets";
import type { SidebarEntry } from "@utils/types";

const images = import.meta.glob("../../assets/**");

export async function getStaticPaths() {
    const blogPosts = await getCollection("blog");
    return blogPosts.map((post) => ({
        params: { blogpost: post.id.replace(/\.[^/.]+$/, "") },
        props: { post, blogPosts },
    }));
}

let { post, blogPosts } = Astro.props;
// filter out posts that have a pubDate later than today
blogPosts = blogPosts
    .filter((post) => {
        const pubDate = new Date(post.data.pubDate);
        if (process.env.CONTEXT === "production") {
            return pubDate < new Date();
        } else {
            return true;
        }
    })
    .sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

// get years of all posts
const years = [...new Set(blogPosts.map((post) => new Date(post.data.pubDate).getFullYear()))].sort((a, b) => b - a);

const sections: SidebarEntry[] = years.map((year) => {
    return {
        type: "group",
        label: year.toString(),
        href: "/blog/#year-" + year,
        collapsed: Astro.url.pathname.includes("/blog/" + year) ? false : true,
        entries: blogPosts
            .filter((post) => new Date(post.data.pubDate).getFullYear() === year)
            .map((post) => {
                return {
                    type: "link",
                    label: post.data.title,
                    href: "/blog/" + post.id.replace(/\.[^/.]+$/, ""),
                    isCurrent: Astro.url.pathname.replace(".html", "") === "/blog/" + post.id.replace(/\.[^/.]+$/, ""),
                };
            }),
    };
});
const { headings, Content } = await render(post);
const title = post.data.title;
const subtitle = post.data.subtitle;
const md_github_url = "https://github.com/nf-core/website/blob/main/sites/main-site/src/content/blog/" + post.id;
---

<MarkdownTocLayout
    title={title}
    subtitle={subtitle}
    md_github_url={md_github_url}
    headings={headings}
    image={`/og.png?title=${encodeURIComponent(title)}&subtitle=${encodeURIComponent(
        subtitle,
    )}&category=blog&authors=${encodeURIComponent(post.data.authors.join(","))}`}
    viewTransitions={true}
    leftSidebar={true}
    rightSidebar={true}
    sections={sections}
    viewTransitions={true}
    doubleNavbar={true}
    sidebarTitle="Blog posts"
    maxHeadingDepth={Astro.props.post.data.maxHeadingDepth || 4}
>
    {
        post.data.headerImage && post.data.embedHeaderImage !== undefined && post.data.embedHeaderImage !== false && (
            <div class="image-container d-flex align-items-center">
                <Image
                    src={
                        post.data.headerImage.startsWith("/assets/")
                            ? images["../.." + post.data.headerImage]()
                            : post.data.headerImage
                    }
                    alt={post.data.headerImageAlt || ""}
                    class="object-fit-contain mb-3 d-flex m-auto py-2"
                    width={
                        !post.data.headerImage.startsWith("/assets/")
                            ? 1200
                            : post.data.headerImageDim
                              ? post.data.headerImageDim[0]
                              : undefined
                    }
                    height={post.data.headerImageDim ? post.data.headerImageDim[1] : 500}
                    densities={[1.5, 2]}
                />
            </div>
        )
    }
    <Content />
    <hr class="d-md-none mt-3" />
    <div class="author-list d-md-none d-flex flex-wrap justify-content-around">
        <SidebarStatsRow lastChild={true} content={[{ title: "Published on" }]}>
            {
                post.data.pubDate.toLocaleDateString("en-GB", {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                })
            }
        </SidebarStatsRow>
        <SidebarStatsRow lastChild={true} content={[{ title: "Written by" }]}>
            {
                post.data.authors.map((author) => {
                    return <GitHubProfilePictureExtended username={author} size={40} imgClasses="mb-0" />;
                })
            }
        </SidebarStatsRow>
    </div>
    <div slot="right-sidebar-bottom" class="d-flex flex-column align-items-start">
        <SidebarStatsRow lastChild={true} content={[{ title: "Written by" }]}>
            {
                post.data.authors.map((author) => {
                    return (
                        <GitHubProfilePictureExtended username={author} size={40} wrapperClasses="flex-grow-1 mt-1" />
                    );
                })
            }
        </SidebarStatsRow>
        <SidebarStatsRow
            lastChild={true}
            content={[
                {
                    title: "Published on",
                    value: post.data.pubDate.toLocaleDateString("en-GB", {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                    }),
                },
            ]}
        />
    </div>
</MarkdownTocLayout>
<style lang="scss">
    :global(.markdown-content img) {
        margin-bottom: 1rem;
    }
</style>

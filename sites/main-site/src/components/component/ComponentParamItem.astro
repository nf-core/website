---
import { Markdown } from "@astropub/md";
import ComponentParamList from "./ComponentParamList.astro";

const { name, value, depth = 0, lastItem = false } = Astro.props;
const { type, description, pattern } = value;
const hasNestedParams = Array.isArray(value) || (typeof value === "object" && !type);
---

{
    name.slice(0, 6) !== "input[" && (
        <div
            class:list={[
                `row align-items-center ${depth > 0 ? "ms-md-" + depth * 2 : ""}`,
                { "border-bottom": !lastItem },
            ]}
        >
            <div class="col-12 col-md-4 col-xxl-3 small-h">
                <h4 id={name + "_" + depth} class="module-row-name-id d-flex align-items-center mb-0 text-start">
                    <code>
                        {name}
                        {type && <span class="opacity-75 ms-0 small">:{type}</span>}
                    </code>
                    <a href={"#" + name + "_" + depth} class="header-link scroll_to_link me-2 mb-2">
                        <span class="fas fa-link" aria-hidden="true" />
                    </a>
                </h4>
            </div>
            <div class={`col-12 description py-1 small col-md-${pattern ? "5" : "7"}`}>
                {description && <Markdown of={description.replace(/(\n)/g, " \n").replace(/\*./g, "\\*.")} />}
            </div>
            <div class={`col-12 col-md-${pattern ? "4" : "1"} ms-auto`}>
                {pattern && <code class="float-end pattern">{pattern}</code>}
            </div>
        </div>
    )
}
{
    hasNestedParams && (
        <div class="col-12 nested">
            <ComponentParamList params={value} depth={depth + 1} />
        </div>
    )
}
<style>
    .description :global(p) {
        margin-bottom: 0;
    }
</style>

---
import EventBannerElement from "@components/event/EventBannerElement.svelte";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { markdown } from "@astropub/md";

let events: CollectionEntry<"events">[] = await getCollection("events");
events = await Promise.all(
    events.map(async (event) => {
        event.data.subtitle = `${await markdown(event.data.subtitle)}`;
        return event;
    }),
);
let now = new Date().getTime();
events = events.sort((a, b) => {
    if (!a.data.start || !b.data.start) return 0;
    return a.data.start.getTime() - b.data.start.getTime();
});

events = events.filter((event) => {
    return event.id.split("/").length === 2;
});
const currentEvents = events.filter((event) => {
    let time_window = 2 * 24 * 60 * 60 * 1000; // 1 day longer as the time_window in UpcomingEvents.svelte to be sure to have all events created during the daily static build
    const event_start_unix =
        event.data.announcement?.start && !event.data.announcement.text
            ? new Date(event.data.announcement.start).getTime()
            : event.data.start?.getTime();
    const event_end_unix = event.data.end?.getTime();

    // increase time window to a week for events longer than 5 hours
    if (event_end_unix - event_start_unix > 5 * 60 * 60 * 1000) {
        time_window = 8 * 24 * 60 * 60 * 1000; // 1 day longer as the time_window in UpcomingEvents.svelte for the same reason as above
    }
    if (event_start_unix < now + time_window && now < event_end_unix) {
        return true;
    }
});

const event_type_classes = {
    bytesize: "success",
    hackathon: "primary",
    poster: "danger",
    talk: "success",
    tutorial: "info",
    training: "warning",
};
const event_type_icons = {
    bytesize: "fa-solid fa-apple-core",
    hackathon: "fa-solid fa-laptop-code",
    poster: "fa-regular fa-image",
    talk: "fa-solid fa-presentation",
    tutorial: "fa-solid fa-graduation-cap",
    training: "fa-solid fa-chalkboard-teacher",
};
---

{
    currentEvents.length > 0 && (
        <div>
            <div class="current-event-container bg-body-secondary">
                <EventBannerElement
                    event_time_category={"ongoing"}
                    events={currentEvents}
                    {event_type_classes}
                    {event_type_icons}
                    client:load
                />
                <EventBannerElement
                    event_time_category={"upcoming"}
                    events={currentEvents}
                    {event_type_classes}
                    {event_type_icons}
                    client:load
                />
            </div>
            <div class="triangle-down bg-body-secondary d-none " />
        </div>
    )
}
<style lang="scss">
    @import "@styles/_variables.scss";
    .current-event-container:has(.ongoing-event, .upcoming-event) ~ .triangle-down {
        display: block !important;
    }

    @include media-breakpoint-down(md) {
        .mainpage-subheader-heading {
            padding-top: 2rem;
        }
    }
</style>

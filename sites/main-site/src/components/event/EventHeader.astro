---
import ExportEventButton from "@components/event/ExportEventButton.svelte";
import LocalDateTime from "@components/event/LocalDateTime.svelte";

const { frontmatter } = Astro.props;
const start = frontmatter.start;
const end = frontmatter.end;
const locations = frontmatter.locations || [];

function getLinkIcon(link) {
    if (/^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/gi.test(link)) {
        return "fab fa-youtube";
    } else if (/^(https?:\/\/)?(www\.)?zoom\.us\/.+$/gi.test(link)) {
        return "fab fa-zoom-us";
    } else if (/^(https?:\/\/)?(www\.)?bilibili\.com\/.+$/gi.test(link)) {
        return "fab fa-bilibili";
    } else if (/^(https?:\/\/)?(www\.)?github\.com\/.+$/gi.test(link)) {
        return "fab fa-github";
    } else if (/^(https?:\/\/)?(www\.)?linkedin\.com\/.+$/gi.test(link)) {
        return "fab fa-linkedin";
    } else if (/^(https?:\/\/)?(www\.)?twitter\.com\/.+$/gi.test(link)) {
        return "fab fa-twitter";
    } else if (/^(https?:\/\/)?(www\.)?(docs\.google\.com)\/.+$/gi.test(link)) {
        return "fab fa-google-drive";
    } else if (/^(https?:\/\/)?(www\.)?(slideshare\.net)\/.+$/gi.test(link)) {
        return "fab fa-slideshare";
    }

    return "fas fa-link";
}
---

<div class="">
    <div class="row row-cols-1 row-cols-md-2">
        <div class="col">
            <dl>
                <dt>Event start:</dt>
                <dd><LocalDateTime date={start} client:visible /></dd>
                <dt>Event end:</dt>
                <dd><LocalDateTime date={end} client:visible /></dd>
            </dl>

            {
                !frontmatter.hideExportButton && (
                    <ExportEventButton frontmatter={frontmatter} add_class="btn-outline-light col" client:idle />
                )
            }
        </div>
        <div class="col">
            <dl>
                <dt>Locations:</dt>
                <dd>
                    <ul class="list-unstyled">
                        {
                            locations?.map((location) => {
                                const locationLinks = Array.isArray(location.links) ? location.links : [location.links];

                                return (
                                    <li class="list-item">
                                        <ul>
                                            <li>
                                                <strong>
                                                    {location.name}
                                                    {location.geoCoordinates && (
                                                        <span>
                                                            :
                                                            <a
                                                                class="m-1 ms-auto  btn btn-sm btn-outline-light"
                                                                href={`https://www.openstreetmap.org/?mlat=${location.geoCoordinates[0]}&mlon=${location.geoCoordinates[1]}&zoom=16#map=16/${location.geoCoordinates[0]}/${location.geoCoordinates[1]}`}
                                                                target="_blank"
                                                            >
                                                                <i class="fa-duotone fa-map-pin me-1" />
                                                                See on map
                                                            </a>
                                                        </span>
                                                    )}
                                                </strong>
                                                <ul class="list-unstyled">
                                                    <li>
                                                        {location.address && (
                                                            <ul>
                                                                <li>
                                                                    <span>{location.address}</span>
                                                                </li>
                                                            </ul>
                                                        )}
                                                        {locationLinks && locationLinks[0] && (
                                                            <ul>
                                                                {locationLinks.map((loc) => {
                                                                    return (
                                                                        <li class="list-item">
                                                                            <a class="text-white underline" href={loc}>
                                                                                {loc}
                                                                            </a>
                                                                        </li>
                                                                    );
                                                                })}
                                                            </ul>
                                                        )}
                                                    </li>
                                                </ul>
                                            </li>
                                        </ul>
                                    </li>
                                );
                            })
                        }
                    </ul>
                </dd>
                {
                    frontmatter.links && frontmatter.links.length > 0 && (
                        <>
                            <dt>{frontmatter.links?.length === 1 ? "Link" : "Links"}:</dt>
                            <dd>
                                {frontmatter.links?.map((link) => {
                                    const iconClass = getLinkIcon(link);
                                    return (
                                        <span class="d-inline-block me-1">
                                            <a class="text-white" target="_blank" href={link}>
                                                {iconClass && <i class={iconClass} />}
                                            </a>
                                        </span>
                                    );
                                })}
                            </dd>
                        </>
                    )
                }
            </dl>
        </div>
    </div>

    <div class="d-flex justify-content-center justify-content-md-start"></div>
</div>
<style lang="scss">
    .dropdown-menu {
        z-index: 100;
    }
</style>

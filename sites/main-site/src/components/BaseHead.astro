---
import { ViewTransitions } from "astro:transitions";
export interface Props {
    title: string;
    description: string;
    image?: string;
    viewTransitions: boolean;
    docSearchTags?: {
        name: string;
        content: string | string[];
    }[];
}

const { title, description, image = "/social_img.png", docSearchTags = [], viewTransitions = false } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="color-scheme" content="light dark" />
<meta name="theme-color" content="#1d9655" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
{
    Astro.url.pathname.includes("events") && (
        <link rel="alternate" type="application/rss+xml" title="nf-core bv Events" href="/events/rss.xml" />
    )
}
{
    Astro.url.pathname.includes("blog") && (
        <link rel="alternate" type="application/rss+xml" title="nf-core Blog" href="/blog/rss.xml" />
    )
}
<meta name="generator" content={Astro.generator} />
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

{viewTransitions && <ViewTransitions fallback="none" />}

<!-- DocSearch -->
{docSearchTags.map(({ name, content }) => <meta name={"docsearch:" + name} content={content} />)}

<!-- Theme -->
<script is:inline>
    if (!window.theme) {
        const theme = (() => {
            if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
                return localStorage.getItem("theme");
            }
            if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
                return "dark";
            }
            return "light";
        })();
        function setTheme(theme) {
            //NOTE: same as in ThemeSwitch.svelte
            const root = document.documentElement;
            if (theme === "auto") {
                if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
                    root.setAttribute("data-bs-theme", "dark");
                } else {
                    root.setAttribute("data-bs-theme", "light");
                }
            } else {
                root.setAttribute("data-bs-theme", theme);
            }
        }

        setTheme(theme);

        document.addEventListener("astro:after-swap", () => {
            setTheme(theme);
        });
    }
</script>
<script>
    import bootstrap from "bootstrap/dist/js/bootstrap.bundle.min.js";
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
    [...tooltipTriggerList].map((tooltipTriggerEl) => {
        const tooltip = bootstrap.Tooltip.getInstance(tooltipTriggerEl);
        if (!tooltip) {
            new bootstrap.Tooltip(tooltipTriggerEl);
        }
    });
    document.addEventListener("astro:after-swap", () => {
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        [...tooltipTriggerList].map((tooltipTriggerEl) => {
            const tooltip = bootstrap.Tooltip.getInstance(tooltipTriggerEl);
            if (!tooltip) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            }
        });
    });
</script>
<!-- Google Analytics -->
<script type="text/partytown" src="https://www.googletagmanager.com/gtag/js?id=G-1J32LEB1KZ"></script>
<script type="text/partytown">
    window.dataLayer = window.dataLayer || [];
    function gtag() {
        dataLayer.push(arguments);
    }
    gtag("js", new Date());
    gtag("config", "G-1J32LEB1KZ");
</script>

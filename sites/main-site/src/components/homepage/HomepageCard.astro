---
import { Icon } from "astro-icon/components";

const { title, icon, icon_color, icon_class = "", icon_dark = "", fontawesome, btn_txt, btn_href } = Astro.props;
---

<div class="card h-100 shadow-sm">
    <div class="card-body d-flex">
        <div class="d-flex flex-column">
            <div class="align-self-start">
                <h5 class="card-title text-success">{title}</h5>
                <div class="d-flex align-items-center">
                    <p class="card-text">
                        <slot />
                    </p>
                </div>
            </div>
            <div class="mt-2">
                {
                    btn_txt && btn_href && (
                        <a href={btn_href} class="btn btn-sm btn-outline-success arrow-hover">
                            <span>{btn_txt}</span>
                        </a>
                    )
                }
            </div>
        </div>
        <div class="icons d-flex align-items-center ms-3">
            {
                icon && (
                    <Icon
                        name={icon}
                        color={icon_color}
                        class={(icon_dark && "hide-dark ") + icon_class}
                        height="6rem"
                        width="7rem"
                    />
                )
            }
            {
                icon_dark && (
                    <Icon
                        name={icon_dark}
                        color="white"
                        class={"hide-light " + icon_class}
                        height="6rem"
                        width="7rem"
                    />
                )
            }
            <i class={fontawesome + " fa-5x"}></i>
        </div>
    </div>
</div>

<style lang="scss">
    @import "@styles/_variables.scss";
    p {
        font-size: 0.9rem;
    }
    .icons svg {
        width: 5rem;
    }
    .docker {
        color: #2496ed;
    }
    .icons svg {
        &.text-success {
            fill: $success;
        }
        &.docker {
            fill: #2496ed;
        }
        :global(.lights) {
            fill: $body-bg-dark;
            opacity: 0.2;
        }
        :global(.fa-secondary) {
            opacity: 0.4;
        }
    }
    // @keyframes fade {
    //     from {
    //         opacity: 1;
    //     }
    //     50% {
    //         opacity: 0;
    //     }
    //     to {
    //         opacity: 1;
    //     }
    // }

    // @-webkit-keyframes fade {
    //     from {
    //         opacity: 1;
    //     }
    //     30% {
    //         opacity: 0;
    //     }
    //     60% {
    //         opacity: 0;
    //     }
    //     to {
    //         opacity: 1;
    //     }
    // }

    // // turn first all lights off after 30 seconds
    // :global(svg .lights) {
    //     opacity: 0;
    //     animation: fade 1000ms ease infinite;
    //     -webkit-animation: fade 1000ms ease infinite;
    //     animation-delay: 30s; // Add animation delay of 10 seconds
    //     -webkit-animation-delay: 30s; // Add animation delay of 10 seconds
    // }
    // :global(svg .lights:nth-of-type(2n + 1)) {
    //     opacity: 0;
    //     animation: fade 1000ms ease alternate infinite;
    //     -webkit-animation: fade 1000ms ease alternate infinite;
    //     animation-delay: 40s; // Add animation delay of 10 seconds
    //     -webkit-animation-delay: 40s; // Add animation delay of 10 seconds
    // }
    // :global(svg .lights:nth-of-type(2n - 1)) {
    //     opacity: 0;
    //     animation: fade 2000ms ease alternate infinite;
    //     -webkit-animation: fade 2000ms ease alternate infinite;
    //     animation-delay: 40s; // Add animation delay of 10 seconds
    //     -webkit-animation-delay: 40s; // Add animation delay of 10 seconds
    // // }
    // :global(svg .lights:nth-of-type(3n + 1)) {
    //     fill:  $body-bg-dark !important;
    //     animation: fade 3000ms ease alternate infinite;
    //     -webkit-animation: fade 3000ms ease alternate infinite;
    //     animation-delay: 40s; // Add animation delay of 10 seconds
    //     -webkit-animation-delay: 40s; // Add animation delay of 10 seconds
    // }
    // :global(svg .lights:nth-of-type(5n + 1)) {
    //     fill:  $danger;
    //     animation: fade 4000ms ease alternate infinite;
    //     -webkit-animation: fade 4000ms ease alternate infinite;
    //     animation-delay: 40s; // Add animation delay of 10 seconds
    //     -webkit-animation-delay: 40s; // Add animation delay of 10 seconds
    // }
</style>

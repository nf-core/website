---
import PageLayout from "@layouts/PageLayout.astro";
import SubHeader from "@components/header/SubHeader.astro";
import TabBar from "@components/TabBar.astro";
import pipelines_json from "@public/pipelines.json";
import type { SidebarEntry } from "@utils/types";

export interface Props {
    pipeline: string | undefined;
    meta_title: string;
    subtitle?: string;
    version?: string;
    versions?: string[];
    is_archived?: boolean;
    headings?: { text: string; slug: string; depth: number; fa_icon?: string }[];
    tabItems?: string[];
    md_github_url?: string;
    showHiddenBtn?: boolean;
    sections?: SidebarEntry[];
    docSearchTags?: { name: string; content: string | string[] }[];
    viewTransitions?: boolean;
}

let {
    pipeline,
    meta_title = pipeline,
    subtitle,
    headings,
    version,
    versions = [],
    is_archived = false,
    tabItems = [],
    md_github_url = "",
    showHiddenBtn = false,
    sections = [],
    docSearchTags = [],
    viewTransitions = true,
} = Astro.props;

let tag_name = version;

if (version === "latest") {
    tag_name = versions[0];
}

const url = Astro.url.pathname;
const baseUrl = "/" + pipeline + "/" + tag_name;

let allTabItems: { label: string; href: string; active: boolean; icon?: string }[] = [];

allTabItems = tabItems
    .filter((file) => file.split("/").length === 1)
    .filter((file) => file.toLowerCase() !== "readme")
    .map((file) => {
        return {
            label: file.replace(/-|_/g, " ").replace(/\w\S*/g, (txt: string) => {
                return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();
            }),
            href: baseUrl + "/docs/" + file + "/",
            active:
                // urls might be pipeline/version/docs/usage|output or pipeline/version/usage|output or pipeline/usage|output
                (url.includes(`/${pipeline}/${version}/docs/${file}`) ||
                    url.includes(`/${pipeline}/${version}/${file}`) ||
                    url.includes(`/${pipeline}/${file}`)) &&
                (file.includes("usage") || file.includes("output")),
            icon: tabItems.some((f) => f.startsWith(file + "/")) ? "fa-regular fa-books" : "",
        };
    });

allTabItems.unshift({
    label: "Introduction",
    href: `/${pipeline}/${version}/`,
    active: url === `/${pipeline}/${version}/` || url === `/${pipeline}/`,
    icon: "fa-solid fa-sign-in",
});

const latestVersion = versions[0];
const hasSchema = pipelines_json.remote_workflows
    .find((wf) => wf.name === pipeline)
    ?.releases.find((r) => r.tag_name === version)?.has_schema;
if (hasSchema) {
    // Add the parameters tab if there is a schema
    allTabItems.push({
        label: "Parameters",
        href: `/${pipeline}/${version}/parameters/`,
        active: url.includes("/parameters"),
        icon: "fa-regular fa-list",
    });
}
if (version !== "dev") {
    const releaseSHA = pipelines_json.remote_workflows
        .find((wf) => wf.name === pipeline)
        ?.releases.find((r) => r.tag_name === version)?.tag_sha;
    allTabItems.splice(1, 0, {
        label: "Results",
        href: `/${pipeline}/${version}/results/${pipeline}/results-${releaseSHA}/`,
        active: url.includes(`/${pipeline}/`) && url.includes(`/results/`),
        icon: "fa-brands fa-aws",
    });
}
if (versions.filter((v) => v !== "dev").length > 0) {
    allTabItems.push({
        label: "Releases",
        href: `/${pipeline}/releases_stats/`,
        active: url.includes(`/${pipeline}/releases_stats`),
        icon: "fa-regular fa-chart-line",
    });
}
const sortOrder = ["Introduction", "Usage", "Parameters", "Output", "Results", "Releases"];
allTabItems.sort((a, b) => sortOrder.indexOf(a.label) - sortOrder.indexOf(b.label));

const gh_url = "https://github.com/nf-core/" + pipeline;
const pipelineData = pipelines_json.remote_workflows.find((wf) => wf.name === pipeline);
const topics = pipelineData?.topics ?? [];
const isDsl2 = pipelineData?.is_DSL2;
---

<PageLayout
    title={"nf-core/" + pipeline}
    meta_title={meta_title}
    subtitle={subtitle}
    mainpage_container={true}
    navTocHeadings={headings}
    md_github_url={md_github_url}
    subfooter={md_github_url !== ""}
    topics={topics}
    sections={sections}
    {showHiddenBtn}
    viewTransitions={viewTransitions}
    docSearchTags={[
        ...docSearchTags,
        { name: "version", content: latestVersion === version ? [version, "latest"] : version },
        { name: "page_type", content: "Pipeline" },
    ]}
>
    <SubHeader
        pipeline={pipeline}
        version={tag_name}
        latestVersion={latestVersion}
        gh_url={gh_url}
        isDsl2={isDsl2}
        is_archived={is_archived}
        slot="sub-header"
    />
    {
        tabItems.length > 0 && (
            <TabBar items={allTabItems}>
                {!Astro.url.pathname.endsWith("/releases_stats/") && (
                    <div class="input-group input-group-sm justify-content-end justify-content-lg-center">
                        <label class="input-group-text" for="version_select">
                            <i class="fas fa-tags" />
                        </label>
                        <div class="dropdown">
                            <button
                                class="btn btn-secondary dropdown-toggle rounded-start-0"
                                type="button"
                                data-bs-toggle="dropdown"
                                aria-expanded="false"
                            >
                                {tag_name}
                            </button>

                            <ul class="dropdown-menu dropdown-menu-end w-100 pipeline-versions">
                                {versions &&
                                    versions.map((v) => {
                                        let url = Astro.url.pathname.replace(
                                            `${pipeline}/${version}`,
                                            `${pipeline}/${v}`,
                                        );
                                        if (url.includes("/results/")) {
                                            url = `/${pipeline}/${v}/results/`;
                                        }
                                        return (
                                            <li>
                                                <a
                                                    class={"dropdown-item " + (v === version ? "active" : "")}
                                                    href={url}
                                                >
                                                    {v}
                                                </a>
                                            </li>
                                        );
                                    })}
                            </ul>
                        </div>
                    </div>
                )}
            </TabBar>
        )
    }

    <div transition:animate="slide">
        <slot />
    </div>
</PageLayout>
<style lang="scss"></style>

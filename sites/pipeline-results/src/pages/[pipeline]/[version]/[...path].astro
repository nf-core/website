---
import pipelines_json from "@public/pipelines.json";

export const prerender = false;

const { pipeline, version, path } = Astro.params;
console.log("redirecting based on [pipeline, version, ...path]", [pipeline, version, path]);

const meta = pipelines_json.remote_workflows.find((wf) => wf.name === pipeline);
if (meta) {
    // check if version starts with usage, output, or docs
    // if so, redirect to the versioned docs
    if (version?.startsWith("usage") || version?.startsWith("output")) {
        return Astro.redirect(`/${pipeline}/${meta.releases[0].tag_name}/docs/${version}`);
    }
    if (version?.startsWith("docs")) {
        return Astro.redirect(`/${pipeline}/${meta.releases[0].tag_name}/${version}/${path}`);
    }
    if (version?.startsWith("results")) {
        console.log("redirecting ", version, " to ", meta.releases[0].tag_name, "/results");
        return Astro.redirect(`/${pipeline}/${meta.releases[0].tag_name}/results/`);
    }
    if (version?.startsWith("parameters")) {
        console.log("redirecting ", version, " to ", meta.releases[0].tag_name, "/parameters");
        return Astro.redirect(`/${pipeline}/${meta.releases[0].tag_name}/parameters`);
    }
    const release = meta.releases.find((r) => r.tag_name === version);
    if (release) {
        console.log("redirecting ", version, " to ", release.tag_name);
        if (path?.startsWith("usage") || path?.startsWith("output")) {
            console.log("redirecting ", path, " to ", version);
            return Astro.redirect(`/${pipeline}/${version}/docs/${path}`);
        } else if (path?.startsWith("docs/usage") || path?.startsWith("docs/output")) {
            console.log("redirecting ", path, " to ", version);
            return Astro.redirect(`/${pipeline}/${version}/${path}`);
        } else if (path === undefined || path === "") {
            console.log("redirecting ", path, " to ", version);
            return Astro.redirect(`/${pipeline}/${version}/`);
        }
    }
    console.log(`redirecting /${pipeline}/${version}/${path} to 404`);
    return Astro.redirect("/404");
} else {
    console.log("redirecting ", pipeline, " to 404");
    return Astro.redirect("/404");
}
---
